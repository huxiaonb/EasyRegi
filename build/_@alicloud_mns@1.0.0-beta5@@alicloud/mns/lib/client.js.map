{"version":3,"sources":["_@alicloud_mns@1.0.0-beta5@@alicloud/mns/lib/client.js"],"names":["assert","require","debug","httpx","kitx","getEndpoint","toXMLBuffer","parseXML","extract","getResponseHeaders","getCanonicalizedMNSHeaders","Client","accountid","opts","accessKeyID","accessKeyId","accessKeySecret","region","domain","endpoint","endpointDomain","securityToken","method","resource","type","requestBody","attentions","url","headers","buildHeaders","toString","request","data","response","statusCode","code","contentType","read","responseBody","startsWith","responseData","Error","e","message","Message","requestid","RequestId","hostid","HostId","err","name","Code","body","forEach","key","undefined","verb","canonicalizedMNSHeaders","md5","date","toSignString","buff","Buffer","from","degist","sha1","customHeaders","Date","toGMTString","digest","length","signature","sign","params","put","delete","start","limit","prefix","subType","get","queueName","post","waitSeconds","timeout","numOfMessages","receiptHandle","receiptHandles","visibilityTimeout","topic","module","exports"],"mappings":"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","file":"_@alicloud_mns@1.0.0-beta5@@alicloud/mns/lib/client.js","sourcesContent":["'use strict';\n\nconst assert = require('assert');\n\nconst debug = require('debug')('mns:client');\nconst httpx = require('httpx');\nconst kitx = require('kitx');\n\nconst {\n  getEndpoint,\n  toXMLBuffer,\n  parseXML,\n  extract,\n  getResponseHeaders,\n  getCanonicalizedMNSHeaders\n} = require('./helper');\n\nclass Client {\n  constructor(accountid, opts) {\n    assert(accountid, '\"accountid\" must be passed in');\n    this.accountid = accountid;\n    assert(opts, 'must pass in \"opts\"');\n    // 兼容\n    const accessKeyID = opts.accessKeyId || opts.accessKeyID;\n    assert(accessKeyID, 'must pass in \"opts.accessKeyID\"');\n    this.accessKeyID = accessKeyID;\n    assert(opts.accessKeySecret, 'must pass in \"opts.accessKeySecret\"');\n    this.accessKeySecret = opts.accessKeySecret;\n    assert(opts.region, 'must pass in \"opts.region\"');\n    const {domain, endpoint} = getEndpoint(accountid, opts);\n    this.endpointDomain = domain;\n    this.endpoint = endpoint;\n\n    // security token\n    this.securityToken = opts.securityToken;\n  }\n\n  async request(method, resource, type, requestBody, attentions = [], opts = {}) {\n    const url = `${this.endpoint}${resource}`;\n    debug('url: %s', url);\n    debug('method: %s', method);\n    const headers = this.buildHeaders(method, requestBody, resource, opts.headers);\n    debug('request headers: %j', headers);\n    debug('request body: %s', requestBody.toString());\n    const response = await httpx.request(url, Object.assign(opts, {\n      method: method,\n      headers: headers,\n      data: requestBody\n    }));\n\n    debug('statusCode %s', response.statusCode);\n    debug('response headers: %j', response.headers);\n    const code = response.statusCode;\n\n    const contentType = response.headers['content-type'] || '';\n    // const contentLength = response.headers['content-length'];\n    const responseBody = await httpx.read(response, 'utf8');\n    debug('response body: %s', responseBody);\n\n    var body;\n    if (responseBody && contentType.startsWith('text/xml')) {\n      const responseData = await parseXML(responseBody);\n\n      if (responseData.Error) {\n        const e = responseData.Error;\n        const message = extract(e.Message);\n        const requestid = extract(e.RequestId);\n        const hostid = extract(e.HostId);\n        const err = new Error(`${method} ${url} failed with ${code}. ` +\n          `requestid: ${requestid}, hostid: ${hostid}, message: ${message}`);\n        err.name = 'MNS' + extract(e.Code) + err.name;\n        throw err;\n      }\n\n      body = {};\n      Object.keys(responseData[type]).forEach((key) => {\n        if (key !== '$') {\n          body[key] = extract(responseData[type][key]);\n        }\n      });\n    }\n\n    return {\n      code,\n      headers: getResponseHeaders(response.headers, attentions),\n      body: body\n    };\n  }\n\n  get(resource, type, opts) {\n    return this.request('GET', resource, type, '', [], opts);\n  }\n\n  put(resource, type, body, attentions = [], opts = {}) {\n    return this.request('PUT', resource, type, body, attentions, opts);\n  }\n\n  post(resource, type, body) {\n    return this.request('POST', resource, type, body);\n  }\n\n  delete(resource) {\n    return this.request('DELETE', resource, undefined, '');\n  }\n\n  sign(verb, headers, resource) {\n    const canonicalizedMNSHeaders = getCanonicalizedMNSHeaders(headers);\n    const md5 = headers['content-md5'] || '';\n    const date = headers['date'];\n    const type = headers['content-type'] || '';\n\n    var toSignString = `${verb}\\n${md5}\\n${type}\\n${date}\\n${canonicalizedMNSHeaders}${resource}`;\n    // Signature = base64(hmac-sha1(VERB + \"\\n\"\n    //             + CONTENT-MD5 + \"\\n\"\n    //             + CONTENT-TYPE + \"\\n\"\n    //             + DATE + \"\\n\"\n    //             + CanonicalizedMNSHeaders\n    //             + CanonicalizedResource))\n    var buff = Buffer.from(toSignString, 'utf8');\n    const degist = kitx.sha1(buff, this.accessKeySecret, 'binary');\n    return Buffer.from(degist, 'binary').toString('base64');\n  }\n\n  buildHeaders(method, body, resource, customHeaders) {\n    const date = new Date().toGMTString();\n\n    const headers = {\n      'date': date,\n      'host': this.endpointDomain,\n      'x-mns-date': date,\n      'x-mns-version': '2015-06-06'\n    };\n\n    if (method !== 'GET' && method !== 'HEAD') {\n      const contentType = 'text/xml';\n      const digest = kitx.md5(body, 'hex');\n      const md5 = Buffer.from(digest, 'utf8').toString('base64');\n      Object.assign(headers, {\n        'content-length': body.length,\n        'content-type': contentType,\n        'content-md5': md5\n      });\n    }\n\n    Object.assign(headers, customHeaders);\n\n    const signature = this.sign(method, headers, resource);\n\n    headers['authorization'] = `MNS ${this.accessKeyID}:${signature}`;\n\n    if (this.securityToken) {\n      headers['security-token'] = this.securityToken;\n    }\n\n    return headers;\n  }\n\n  // Queue\n  createQueue(name, params = {}) {\n    const body = toXMLBuffer('Queue', params);\n    const url = `/queues/${name}`;\n    return this.put(url, 'Queue', body, ['location']);\n  }\n\n  deleteQueue(name) {\n    return this.delete(`/queues/${name}`, 'Queue', '');\n  }\n\n  async listQueue(start, limit, prefix) {\n    var customHeaders = {};\n    if (typeof start !== 'undefined') {\n      customHeaders['x-mns-marker'] = start;\n    }\n\n    if (typeof limit !== 'undefined') {\n      customHeaders['x-mns-ret-number'] = limit;\n    }\n\n    if (typeof limit !== 'undefined') {\n      customHeaders['x-mns-prefix'] = prefix;\n    }\n\n    const subType = 'Queue';\n    const response = await this.get('/queues', 'Queues', {\n      headers: customHeaders\n    });\n    response.body = response.body[subType];\n    return response;\n  }\n\n  getQueueAttributes(queueName) {\n    return this.get(`/queues/${queueName}`, 'Queue');\n  }\n\n  setQueueAttributes(queueName, params = {}) {\n    const body = toXMLBuffer('Queue', params);\n    const url = `/queues/${queueName}?metaoverride=true`;\n    return this.put(url, 'Queue', body);\n  }\n\n  // Message\n  sendMessage(queueName, params) {\n    const url = `/queues/${queueName}/messages`;\n    const body = toXMLBuffer('Message', params);\n    return this.post(url, 'Message', body);\n  }\n\n  async batchSendMessage(queueName, params) {\n    const url = `/queues/${queueName}/messages`;\n    const subType = 'Message';\n    const body = toXMLBuffer('Messages', params, subType);\n    var response = await this.post(url, 'Messages', body);\n    response.body = response.body[subType];\n    return response;\n  }\n\n  receiveMessage(queueName, waitSeconds) {\n    var url = `/queues/${queueName}/messages`;\n    if (waitSeconds) {\n      url += `?waitseconds=${waitSeconds}`;\n    }\n\n    // 31000 31s +1s max waitSeconds is 30s\n    return this.get(url, 'Message', {timeout: 31000});\n  }\n\n  async batchReceiveMessage(queueName, numOfMessages, waitSeconds) {\n    var url = `/queues/${queueName}/messages?numOfMessages=${numOfMessages}`;\n    if (waitSeconds) {\n      url += `&waitseconds=${waitSeconds}`;\n    }\n\n    const subType = 'Message';\n    // 31000 31s +1s max waitSeconds is 30s\n    var response = await this.get(url, 'Messages', {timeout: 31000});\n    response.body = response.body[subType];\n    return response;\n  }\n\n  peekMessage(queueName) {\n    return this.get(`/queues/${queueName}/messages?peekonly=true`, 'Message');\n  }\n\n  async batchPeekMessage(queueName, numOfMessages) {\n    const url = `/queues/${queueName}/messages?` +\n      `peekonly=true&numOfMessages=${numOfMessages}`;\n\n    const subType = 'Message';\n    // 31000 31s +1s max waitSeconds is 30s\n    var response = await this.get(url, 'Messages');\n    response.body = response.body[subType];\n    return response;\n  }\n\n  deleteMessage(queueName, receiptHandle) {\n    const url = `/queues/${queueName}/messages?ReceiptHandle=${receiptHandle}`;\n    return this.delete(url, 'Message', '');\n  }\n\n  async batchDeleteMessage(queueName, receiptHandles) {\n    const body = toXMLBuffer('ReceiptHandles', receiptHandles);\n    const url = `/queues/${queueName}/messages`;\n    const response = await this.delete(url, 'Errors', body);\n    const subType = 'Error';\n    response.body = response.body[subType];\n    return response;\n  }\n\n  changeMessageVisibility(queueName, receiptHandle, visibilityTimeout) {\n    const url = `/queues/${queueName}/messages?` +\n      `receiptHandle=${receiptHandle}&visibilityTimeout=${visibilityTimeout}`;\n    return this.put(url, 'ChangeVisibility');\n  }\n\n  // Topic\n  createTopic(name, params = {}) {\n    const body = toXMLBuffer('Topic', params);\n    return this.put(`/topics/${name}`, 'Topic', body, ['location']);\n  }\n\n  deleteTopic() {}\n  async listTopic(start, limit, prefix) {\n    var customHeaders = {};\n    if (typeof start !== 'undefined') {\n      customHeaders['x-mns-marker'] = start;\n    }\n\n    if (typeof limit !== 'undefined') {\n      customHeaders['x-mns-ret-number'] = limit;\n    }\n\n    if (typeof limit !== 'undefined') {\n      customHeaders['x-mns-prefix'] = prefix;\n    }\n\n    const subType = 'Topic';\n    const response = await this.get('/topics', 'Topics', {\n      headers: customHeaders\n    });\n    response.body = response.body[subType];\n    return response;\n  }\n\n  getTopicAttributes(name) {\n    return this.get(`/topics/${name}`, 'Topic');\n  }\n\n  setTopicAttributes(name, params = {}) {\n    const body = toXMLBuffer('Topic', params);\n    const url = `/topics/${name}?metaoverride=true`;\n    return this.put(url, 'Topic', body);\n  }\n\n  // Subscription\n  subscribe() {}\n  unsubscribe() {}\n  listSubscriptionByTopic() {}\n  getSubscriptionAttributes() {}\n  setSubscriptionAttributes() {}\n\n  // Message\n  publishMessage(topic, params) {\n    const url = `/topics/${topic}/messages`;\n    const body = toXMLBuffer('Message', params);\n    return this.post(url, 'Message', body);\n  }\n\n  // Notifications\n  httpEndpoint() {}\n}\n\nmodule.exports = Client;\n"],"sourceRoot":"/source/"}